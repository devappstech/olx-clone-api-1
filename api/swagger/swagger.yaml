openapi: 3.0.0
servers:
  - url: 'http://localhost:3000/api'
info:
  version: 1.0.0
  title: OlxClone API
  description: >-
    Olx Clone is demo projet for learning backend, it is classification site
    api.
  termsOfService: terms
  contact:
    name: akash
    url: 'http://imrprowised.com'
    email: akash@improwised.com
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'

# global security
security:
  - cookieAuth: []

# Tags name Define here
tags:
- name: "advertises"
  description: "everything about advertises"
- name: "users"
  description: "everything about users"
- name: "states"
  description: "everything about states"
- name: "categories"
  description: "everything about categories"

# PATHS Start from here

paths:

# State Path -----------------------------------
  /states:
    get:
      tags:
      - "states"
      summary: gets states data from database
      description: this is used to get all state data along.
      operationId: readAll
      responses:
        '200':
          description: Showing Recently added advertises

    post:
      tags:
      - "states"
      summary: Creates a state
      description: Adds a new state to the state list.
      responses:
        '201':
          description: State succesfully created.
        '404':
          description: State couldn't have been created.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/state'
        description: The state to create.

  '/states/{stateId}':
    get:
      tags:
      - "states"
      summary: Returns a state by ID.
      parameters:
        - name: stateId
          in: path
          description: ID of state need to fetch
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Showing Recently added advertises
        '404':
          description: Not Found

    put:
      tags:
      - "states"
      summary: update state name by id.
      parameters:
        - name: stateId
          in: path
          description: name of state need to patch/update
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Updated state advertises
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/state'

    delete:
      tags:
      - "states"
      summary: it deletes state using state id.
      description: remove state from database.
      parameters:
        - name: stateId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Not Found!

  /states/{id}/cities:
    get:
      tags:
      - "states"
      description: fetch all citits of given state's id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully fetched!
        '404':
          description: Not Found!

# Categories Path -----------------------------------
  /categories:
    get:
      tags:
      - "categories"
      summary: fetch list of categories available in system
      description: it fetches categories list from database and send it to user
      responses:
        '200':
          description: OK
        '404':
          description: Not Found!

    post:
      tags:
      - "categories"
      summary: create new categories
      description: used to create new categories
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/categories'
        description: The category to create.

  /categories/{categoryId}:
    get:
      tags:
      - "categories"
      description: "get category by id"
      parameters:
        - name: categoryId
          in: path
          description: ID of category need to fetch
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "gives category name"
        '404':
          description: 'Not Found'

    put:
      tags:
      - "categories"
      description: "Updates Category by id"
      parameters:
        - name: categoryId
          in: path
          description: Updates Category
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "update category name"
        '404':
          description: 'Not Found!'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/categories'
        description: The category to update.

    delete:
      tags:
      - "categories"
      description: "Delete Category Name"
      parameters:
        - name: categoryId
          in: path
          description: delete category id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "delete category from system"
        '404':
          description: 'Not Found!'

# Advertises Path --------------------------------
  /ads:
    get:
      tags:
      - "advertises"
      description: "fetch all advertises in descending order of time and date"
      parameters:
      - name: limit
        in: query
        required: true
        schema:
          type: integer
        description: Limit For Pagination
      - name: offset
        in: query
        required: true
        schema:
          type: integer
        description: Offset For Pagination
      responses:
        '200':
          description: "Successfully Fetched!"
        '404':
          description: "Not Found!"

    post:
      tags:
      - "advertises"
      description: Create a Free Advertise
      requestBody:
        content:
         application/json:
          schema:
            $ref: '#/components/schemas/advertises'
      responses:
        '201':
          description: created successfully!
        '404':
          description: Not Found!


  /ads/{id}:
    get:
      tags:
      - "advertises"
      description: "get single advertise information"
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: id of advertise needed to fetch information
      responses:
        '200':
          description: OK
        '404':
          description: Not Found

    put:
      tags:
      - "advertises"
      description: to update advertise data by id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertises'
      responses:
        '200':
          description: Advertise Updated successfully
        '404':
          description: Not Found

    delete:
      tags:
      - "advertises"
      description: Delete advertise by id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Deleted Successfully
        '404':
          description: Not Found

  /ads/{id}/sells:
    put:
      tags:
      - "advertises"
      description: set advertise as sold/selling
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise_sold'
      responses:
        '200':
          description: Updated Successfully
        '404':
          description: Not Found

  /ads/search/{keyword}:
    get:
      tags:
      - "advertises"
      description: it is used for search and filter
      parameters:
      - name: keyword
        in: path
        required: true
        schema:
          type: string
        description: this keyword is required to search in advertises
      - name: category
        in: query
        required: false
        schema:
          type: string
        description: this category is required to search in advertises
      - name: limit
        in: query
        required: true
        schema:
          type: integer
        description: Limit is required for Pagination
      - name: offset
        in: query
        required: true
        schema:
          type: integer
        description: Offset is required for Pagination
      - name: minprice
        in: query
        required: false
        schema:
          type: number
        description: Minumum Price for ranging between prices
      - name: maxprice
        in: query
        required: false
        schema:
          type: number
        description: Maximum Price for ranging between prices
      - name: Location
        in: query
        required: false
        schema:
          type: string
        description: filter based on location
      responses:
        '200':
          description: OK
        '404':
          description: Not Found

  /ads/categories/{categoryId}:
    get:
      tags:
      - "advertises"
      description: it will search advertises in database within categoryId and send result
      parameters:
      - name: categoryId
        in: path
        required: true
        schema:
          type: integer
        description: category is required to search in advertises

      responses:
        '200':
          description: OK
        '404':
          description: Not Found

  /ads/{id}/upload:
    post:
      tags:
      - "advertises"
      description: upload images of advertise by ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: id of advertise
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                photos:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: successfully uploaded!
        '404':
          description: Not Found!

# Users Path ---------------------------------------

  /users/register:
    post:
      tags:
      - "users"
      description: register new local user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRegistration'
      responses:
        '201':
          description: user registered!
        '404':
          description: Not Found

  /users/profile/{id}:
    get:
      tags:
      - "users"
      description: fetch user information
      parameters:
      - name: id
        in: path
        required: true
        description: id of user
        schema:
          type: integer
      responses:
        '200':
          description: successfully fetched!
        '404':
          description: Not Found!

  /users/ads/{id}:
    get:
      tags:
      - "users"
      description: fetch advertises created by user
      parameters:
      - name: id
        in: path
        required: true
        description: id of user
        schema:
          type: integer
      responses:
        '200':
          description: successfully fetched!
        '404':
          description: Not Found!

  /users/edit/{id}:
    put:
      tags:
      - "users"
      description: fetch user information
      parameters:
       - name: id
         in: path
         required: true
         description: id of user
         schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRegistration'
      responses:
        '200':
          description: successfully fetched!
        '404':
          description: Not Found!

components:

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: connect.sid

  schemas:

    state:
      required:
        - name
      properties:
        name:
          type: string
    categories:
      required:
        - name
      properties:
        name:
          type: string

    advertise_sold:
      required:
        - sold
      properties:
        sold:
          type: boolean

    userRegistration:
      required:
        - username
        - email
        - phoneNumber
        - password
      properties:
        username:
          type: string
        email:
          type: string
        phoneNumber:
          type: number
        password:
          type: string

    userLogin:
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    advertises:
      required:
        - userId
        - title
        - description
        - price
        - condition
        - categoryId
        - latitude
        - longitude
        - cityId
      properties:
        userId:
          type: integer
        title:
          type: string
        description:
          type: string
        price:
          type: number
        condition:
          type: string
        categoryId:
          type: integer
        lattitude:
          type: number
        longitude:
          type: number
        cityId:
          type: integer